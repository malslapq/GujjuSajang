plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0' apply false
    id 'io.spring.dependency-management' version '1.1.5' apply false
}

allprojects {
    group = 'com.GujjuSajang'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        compileOnly 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'
        runtimeOnly 'com.mysql:mysql-connector-j'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
        testImplementation 'org.assertj:assertj-core:3.23.1'
        testImplementation 'org.mockito:mockito-core:4.8.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        implementation 'org.mindrot:jbcrypt:0.4'
        implementation 'org.springframework.kafka:spring-kafka'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.0"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.5"
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    // 공통 설정 파일을 각 모듈의 resources 디렉터리로 복사하는 작업 추가
    tasks.register('copyCommonYml', Copy) {
        from "${rootProject.projectDir}/application-core.yml"
        into "${projectDir}/src/main/resources"
    }

    tasks.withType(JavaCompile).configureEach {
        dependsOn copyCommonYml
    }

    processResources.dependsOn copyCommonYml
}
